{
	// Place your snippets for typescriptreact here. Each snippet is defined under a snippet name and has a prefix, body and 
	// description. The prefix is what is used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. Placeholders with the 
	// same ids are connected.
	// Example:
	// "Print to console": {
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }

	// component snippets
	"fc":{
		"prefix": "fc",
		"body": [
			"",
			"",
		    // "export default function ${2:$TM_FILENAME_BASE}",
		    "export default function ${1:Component}(){",
				"\t${0}",
				"",
				"\treturn (",
					"\t\t<${div}>",
					"",
					"\t\t</${div}>",
				"\t)",
			"}"
		],
		"description": "creates a functional component",
	},
	"fcp":{
		"prefix": "fcp",
		"body": [
			"",
			"",
		    // "export default function ${2:$TM_FILENAME_BASE}",
		    "export default function ${1:Component}(props: ComponentProps<'${div}'> & {}){",
				"\t${0}",
				"",
				"\treturn (",
					"\t\t<${div}>",
					"",
					"\t\t</${div}>",
				"\t)",
			"}"
		],
		"description": "creates a functional component with typed props",
	},
	"fcc":{
		"prefix": "fcc",
		"body": [
			"'use client'",
			"",
			"",
		    // "export default function ${2:$TM_FILENAME_BASE}",
		    "export default function ${1:Component}(props: ComponentProps<'${div}'> & {}){",
				"\t${0}",
				"",
				"\treturn (",
					"\t\t<${div}>",
					"",
					"\t\t</${div}>",
				"\t)",
			"}"
		],
		"description": "creates a client component"
	},
	"fccp":{
		"prefix": "fccp",
		"body": [
			"'use client'",
			"",
			"",
		    // "export default function ${2:$TM_FILENAME_BASE}",
		    "export default function ${1:Component}(props: ComponentProps<'${div}'> & {}){",
				"\t${0}",
				"",
				"\treturn (",
					"\t\t<${div}>",
					"",
					"\t\t</${div}>",
				"\t)",
			"}"
		],
		"description": "creates a client component with typed props"
	},
	"sc":{
		"prefix": "sc",
		"body": [
			"",
			"",
		    // "export default function ${2:$TM_FILENAME_BASE}",
		    "export default async function ${1:Component}(props: ComponentProps<'${div}'> & {}){",
				"\t${0}",
				"",
				"\treturn (",
					"\t\t<${div}>",
					"",
					"\t\t</${div}>",
				"\t)",
			"}"
		],
		"description": "creates a server component"
	},
	
	// useState snippets
	"bus":{
		"prefix": "bus",
		"body": [
			"const [${1},set${1/(.*)/${1:/capitalize}/}] = useState(${false})",
		],
		"description": "creates boolean useState"
	},
	"aus":{
		"prefix": "aus",
		"body": [
			"const [${1},set${1/(.*)/${1:/capitalize}/}] = useState<${any}[]>([])",
		],
		"description": "creates array useState"
	},
	"ous":{
		"prefix": "ous",
		"body": [
			"const [${1},set${1/(.*)/${1:/capitalize}/}] = useState<Record<PropertyKey, ${any}>>({})",
		],
		"description": "creates object useState"
	},

	// useRef snippets
	"bref":{
		"prefix": "bref",
		"body": [
			"const ${ref} = useRef(${false})",
		],
		"description": "creates boolean useRef"
	},
	"aref":{
		"prefix": "aref",
		"body": [
			"const ${ref} = useRef<${any}[]>([])",
		],
		"description": "creates array useRef"
	},
	"oref":{
		"prefix": "oref",
		"body": [
			"const ${ref} = useRef<Record<PropertyKey, ${any}>>({})",
		],
		"description": "creates object useRef"
	},

	// useEffect snippets
	"ue":{
		"prefix": "ue",
		"body": [
			"useEffect(() => {",
			"\t${2}",     // second focus
			"}, [${1}])",    // first focus focus
			""
		],
		"description": "creates useEffect call"
	},

	// async function
	"af":{
		"prefix": "af",
		"body": [
			"async function ${1:Name}(){",
			"\t${2}",
			"}",
			"",
		],
		"description": "creates async normal function"
	},
	"aaf":{
		"prefix": "aaf",
		"body": [
			"const ${1:Name} = async () => {",
			"\t${2}",
			"}",
			"",
		],
		"description": "creates async arrow function"
	},


	// fetch function
	"fget":{
		"prefix": "fget",
		"body": [
			"const res = await fetch(${url},{",
				"\tmethod: 'GET',",
				"\theaders: {",
					"\t\t'Content-Type': 'application/json',",
				"\t},",
			"})",
			"const data = await res.json()",
			"",
		],
		"description": "creates a get fetch call"
	},
	"fpost":{
		"prefix": "fpost",
		"body": [
			"const res = await fetch(${url},{",
				"\tmethod: 'POST',",
				"\tbody: JSON.stringify(${body}),",
				"\theaders: {",
					"\t\t'Content-Type': 'application/json',",
				"\t},",
			"})",
			"const data = await res.json()",
			"",
		],
		"description": "creates a post fetch call"
	},
}